"""fix player and notification relation

Revision ID: 068ee3caae8a
Revises: 45c6b6b6b0c3
Create Date: 2025-09-07 12:19:05.810635

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '068ee3caae8a'
down_revision: Union[str, Sequence[str], None] = '45c6b6b6b0c3'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('entity_logs_table')
    op.drop_constraint(op.f('notifications_table_from_id_fkey'), 'notifications_table', type_='foreignkey')
    op.drop_constraint(op.f('notifications_table_to_id_fkey'), 'notifications_table', type_='foreignkey')
    op.create_foreign_key(None, 'notifications_table', 'users_table', ['to_id'], ['user_id'], ondelete='CASCADE')
    op.create_foreign_key(None, 'notifications_table', 'users_table', ['from_id'], ['user_id'], ondelete='CASCADE')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, 'notifications_table', type_='foreignkey')
    op.drop_constraint(None, 'notifications_table', type_='foreignkey')
    op.create_foreign_key(op.f('notifications_table_to_id_fkey'), 'notifications_table', 'users_table', ['to_id'], ['user_id'])
    op.create_foreign_key(op.f('notifications_table_from_id_fkey'), 'notifications_table', 'users_table', ['from_id'], ['user_id'])
    op.create_table('entity_logs_table',
    sa.Column('log_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('entity_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('message', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('timestamp', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('log_id', name=op.f('entity_logs_table_pkey'))
    )
    # ### end Alembic commands ###
