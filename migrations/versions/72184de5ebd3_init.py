"""init

Revision ID: 72184de5ebd3
Revises: 
Create Date: 2025-08-19 09:13:37.421081

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '72184de5ebd3'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('entity_logs_table',
    sa.Column('log_id', sa.String(), nullable=False),
    sa.Column('entity_id', sa.String(), nullable=False),
    sa.Column('message', sa.Text(), nullable=False),
    sa.Column('timestamp', sa.DateTime(timezone=True), nullable=False),
    sa.PrimaryKeyConstraint('log_id')
    )
    op.create_table('images_url_table',
    sa.Column('id', sa.String(), nullable=False),
    sa.Column('entity_id', sa.String(), nullable=False),
    sa.Column('image_url', sa.String(), nullable=False),
    sa.Column('tag', sa.Text(), nullable=False),
    sa.Column('uploaded_at', sa.DateTime(timezone=True), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('league_trophies_idx', 'images_url_table', ['entity_id', 'tag'], unique=False)
    op.create_table('users_table',
    sa.Column('user_id', sa.String(), nullable=False),
    sa.Column('email', sa.String(length=120), nullable=False),
    sa.Column('contact_number', sa.String(length=15), nullable=False),
    sa.Column('password_hash', sa.String(), nullable=False),
    sa.Column('is_verified', sa.Boolean(), nullable=False),
    sa.Column('account_type', sa.Enum('Player', 'League_Administrator_Local', 'League_Administrator_LGU', 'Team_Manager', name='account_type_enum'), nullable=False),
    sa.Column('fcm_token', sa.Text(), nullable=True),
    sa.Column('verification_token_created_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('display_name', sa.String(length=120), nullable=True),
    sa.PrimaryKeyConstraint('user_id'),
    sa.UniqueConstraint('display_name'),
    sa.UniqueConstraint('email')
    )
    op.create_table('league_administrator_table',
    sa.Column('league_administrator_id', sa.String(), nullable=False),
    sa.Column('is_allowed', sa.Boolean(), server_default=sa.text('false'), nullable=False),
    sa.Column('is_operational', sa.Boolean(), server_default=sa.text('true'), nullable=False),
    sa.Column('user_id', sa.String(), nullable=False),
    sa.Column('organization_type', sa.String(), nullable=False),
    sa.Column('organization_name', sa.String(length=200), nullable=False),
    sa.Column('organization_address', sa.String(length=250), nullable=False),
    sa.Column('organization_photo_url', sa.String(), nullable=True),
    sa.Column('organization_logo_url', sa.String(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users_table.user_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('league_administrator_id'),
    sa.UniqueConstraint('user_id')
    )
    op.create_table('notifications_table',
    sa.Column('notification_id', sa.String(), nullable=False),
    sa.Column('action_type', sa.Enum('team_join_request', 'message_only', 'announcement', 'payment_failed', 'payment_received', 'team_invitation', name='notification_action_enum'), nullable=False),
    sa.Column('action_id', sa.String(), nullable=True),
    sa.Column('title', sa.String(length=100), nullable=True),
    sa.Column('message', sa.String(length=255), nullable=False),
    sa.Column('image_url', sa.String(), nullable=True),
    sa.Column('to_id', sa.String(), nullable=False),
    sa.Column('from_id', sa.String(), nullable=False),
    sa.Column('status', sa.Enum('unread', 'read', name='notification_status_enum'), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['from_id'], ['users_table.user_id'], ),
    sa.ForeignKeyConstraint(['to_id'], ['users_table.user_id'], ),
    sa.PrimaryKeyConstraint('notification_id')
    )
    op.create_table('players_table',
    sa.Column('player_id', sa.String(), nullable=False),
    sa.Column('user_id', sa.String(), nullable=False),
    sa.Column('full_name', sa.String(length=250), nullable=False),
    sa.Column('gender', sa.Enum('Male', 'Female', name='player_gender_enum'), nullable=False),
    sa.Column('birth_date', sa.Date(), nullable=False),
    sa.Column('player_address', sa.String(length=250), nullable=False),
    sa.Column('jersey_name', sa.String(length=1000), nullable=False),
    sa.Column('jersey_number', sa.Float(), nullable=False),
    sa.Column('position', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('height_in', sa.Float(), nullable=False),
    sa.Column('weight_kg', sa.Float(), nullable=False),
    sa.Column('games_played', sa.Integer(), nullable=False),
    sa.Column('points_scored', sa.Integer(), nullable=False),
    sa.Column('assists', sa.Integer(), nullable=False),
    sa.Column('rebounds', sa.Integer(), nullable=False),
    sa.Column('profile_image_url', sa.Text(), nullable=False),
    sa.Column('is_ban', sa.Boolean(), nullable=False),
    sa.Column('is_allowed', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users_table.user_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('player_id'),
    sa.UniqueConstraint('user_id')
    )
    op.create_table('teams_table',
    sa.Column('team_id', sa.String(), nullable=False),
    sa.Column('user_id', sa.String(), nullable=False),
    sa.Column('team_name', sa.String(length=100), nullable=False),
    sa.Column('team_address', sa.String(length=250), nullable=False),
    sa.Column('contact_number', sa.String(length=15), nullable=False),
    sa.Column('team_motto', sa.String(length=100), nullable=True),
    sa.Column('team_logo_url', sa.Text(), nullable=False),
    sa.Column('championships_won', sa.Integer(), nullable=False),
    sa.Column('coach_name', sa.String(length=100), nullable=False),
    sa.Column('assistant_coach_name', sa.String(length=100), nullable=True),
    sa.Column('total_wins', sa.Integer(), nullable=False),
    sa.Column('total_losses', sa.Integer(), nullable=False),
    sa.Column('total_draws', sa.Integer(), nullable=False),
    sa.Column('total_points', sa.Integer(), nullable=False),
    sa.Column('is_recruiting', sa.Boolean(), nullable=False),
    sa.Column('team_category', sa.String(length=100), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users_table.user_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('team_id')
    )
    op.create_table('leagues_table',
    sa.Column('league_id', sa.String(), nullable=False),
    sa.Column('league_administrator_id', sa.String(), nullable=False),
    sa.Column('league_title', sa.String(length=100), nullable=False),
    sa.Column('league_description', sa.Text(), nullable=False),
    sa.Column('league_budget', sa.Float(), nullable=False),
    sa.Column('league_courts', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('league_officials', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('league_referees', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('league_affiliates', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('registration_deadline', sa.DateTime(timezone=True), nullable=False),
    sa.Column('opening_date', sa.DateTime(timezone=True), nullable=False),
    sa.Column('league_schedule', postgresql.DATERANGE(), nullable=False),
    sa.Column('banner_url', sa.String(), nullable=True),
    sa.Column('status', sa.Enum('Scheduled', 'Ongoing', 'Completed', 'Postponed', 'Cancelled', name='league_status_enum'), nullable=False),
    sa.Column('season_year', sa.Integer(), nullable=False),
    sa.Column('sportsmanship_rules', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('option', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['league_administrator_id'], ['league_administrator_table.league_administrator_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('league_id'),
    sa.UniqueConstraint('league_administrator_id')
    )
    op.create_table('player_team_table',
    sa.Column('player_team_id', sa.String(), nullable=False),
    sa.Column('player_id', sa.String(), nullable=False),
    sa.Column('team_id', sa.String(), nullable=False),
    sa.Column('is_ban', sa.Boolean(), nullable=False),
    sa.Column('is_accepted', sa.Enum('Pending', 'Accepted', 'Rejected', 'Invited', name='player_is_accepted_enum'), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['player_id'], ['players_table.player_id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['team_id'], ['teams_table.team_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('player_team_id'),
    sa.UniqueConstraint('player_id', 'team_id', name='unique_player_team')
    )
    op.create_table('league_categories_table',
    sa.Column('category_id', sa.String(), nullable=False),
    sa.Column('league_id', sa.String(), nullable=False),
    sa.Column('category_name', sa.String(length=100), nullable=False),
    sa.Column('max_team', sa.Integer(), nullable=False),
    sa.Column('accept_teams', sa.Boolean(), nullable=False),
    sa.Column('team_entrance_fee_amount', sa.Float(), nullable=True),
    sa.Column('individual_player_entrance_fee_amount', sa.Float(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['league_id'], ['leagues_table.league_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('category_id')
    )
    op.create_table('league_category_rounds_table',
    sa.Column('round_id', sa.String(), nullable=False),
    sa.Column('category_id', sa.String(), nullable=False),
    sa.Column('round_name', sa.Enum('Elimination', 'Quarterfinal', 'Semifinal', 'Final', 'Regular Season', 'Exhibition', 'Practice', name='round_name_enum'), nullable=False),
    sa.Column('round_order', sa.Integer(), nullable=False),
    sa.Column('round_format', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('position', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('round_status', sa.Enum('Upcoming', 'Ongoing', 'Finished', name='round_status_enum'), nullable=False),
    sa.Column('next_round_id', sa.String(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['category_id'], ['league_categories_table.category_id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['next_round_id'], ['league_category_rounds_table.round_id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('round_id')
    )
    op.create_table('league_teams_table',
    sa.Column('league_team_id', sa.String(), nullable=False),
    sa.Column('team_id', sa.String(), nullable=False),
    sa.Column('league_id', sa.String(), nullable=False),
    sa.Column('category_id', sa.String(), nullable=False),
    sa.Column('status', sa.Enum('Pending', 'Accepted', 'Rejected', name='league_team_status_enum'), nullable=False),
    sa.Column('amount_paid', sa.Float(), nullable=False),
    sa.Column('payment_status', sa.Enum('Pending', 'Paid Online', 'Paid On Site', 'Waived', name='payment_status_enum'), nullable=False),
    sa.Column('wins', sa.Integer(), nullable=False),
    sa.Column('losses', sa.Integer(), nullable=False),
    sa.Column('draws', sa.Integer(), nullable=False),
    sa.Column('points', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.CheckConstraint('draws >= 0', name='check_draws_positive'),
    sa.CheckConstraint('losses >= 0', name='check_losses_positive'),
    sa.CheckConstraint('points >= 0', name='check_points_positive'),
    sa.CheckConstraint('wins >= 0', name='check_wins_positive'),
    sa.ForeignKeyConstraint(['category_id'], ['league_categories_table.category_id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['league_id'], ['leagues_table.league_id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['team_id'], ['teams_table.team_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('league_team_id'),
    sa.UniqueConstraint('league_id')
    )
    op.create_table('league_players_table',
    sa.Column('league_player_id', sa.String(), nullable=False),
    sa.Column('league_id', sa.String(), nullable=False),
    sa.Column('player_team_id', sa.String(), nullable=True),
    sa.Column('league_team_id', sa.String(), nullable=True),
    sa.Column('total_points', sa.Float(), nullable=False),
    sa.Column('is_ban', sa.Boolean(), nullable=False),
    sa.Column('is_allowed', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['league_id'], ['leagues_table.league_id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['league_team_id'], ['league_teams_table.league_team_id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['player_team_id'], ['player_team_table.player_team_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('league_player_id')
    )
    op.create_table('matches_table',
    sa.Column('match_id', sa.String(), nullable=False),
    sa.Column('round_id', sa.String(), nullable=True),
    sa.Column('league_id', sa.String(), nullable=False),
    sa.Column('division_id', sa.String(), nullable=True),
    sa.Column('home_team_id', sa.String(), nullable=False),
    sa.Column('away_team_id', sa.String(), nullable=False),
    sa.Column('home_team_score', sa.Integer(), nullable=True),
    sa.Column('away_team_score', sa.Integer(), nullable=True),
    sa.Column('winner_team_id', sa.String(), nullable=True),
    sa.Column('loser_team_id', sa.String(), nullable=True),
    sa.Column('scheduled_date', sa.DateTime(timezone=True), nullable=True),
    sa.Column('duration_minutes', sa.Integer(), nullable=False),
    sa.Column('court', sa.String(), nullable=True),
    sa.Column('referees', sa.ARRAY(sa.String()), nullable=False),
    sa.Column('category', sa.Enum('Elimination', 'Quarterfinal', 'Semifinal', 'Final', 'Regular Season', 'Exhibition', 'Practice', name='round_name_enum'), nullable=False),
    sa.Column('status', sa.Enum('Unscheduled', 'Scheduled', 'In Progress', 'Completed', 'Cancelled', 'Postponed', name='match_status_enum'), nullable=False),
    sa.Column('match_notes', sa.Text(), nullable=True),
    sa.Column('is_featured', sa.Boolean(), nullable=False),
    sa.Column('round_number', sa.Integer(), nullable=True),
    sa.Column('bracket_side', sa.String(), nullable=True),
    sa.Column('bracket_position', sa.String(), nullable=True),
    sa.Column('previous_match_ids', sa.ARRAY(sa.String()), nullable=False),
    sa.Column('next_match_id', sa.String(), nullable=True),
    sa.Column('next_match_slot', sa.String(), nullable=True),
    sa.Column('loser_next_match_id', sa.String(), nullable=True),
    sa.Column('loser_next_match_slot', sa.String(), nullable=True),
    sa.Column('pairing_method', sa.String(), nullable=True),
    sa.Column('generated_by', sa.String(), nullable=True),
    sa.Column('display_name', sa.String(), nullable=True),
    sa.Column('is_final', sa.Boolean(), nullable=False),
    sa.Column('is_third_place', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['round_id'], ['league_category_rounds_table.round_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('match_id'),
    sa.UniqueConstraint('league_id', 'category', 'division_id', 'round_number', 'home_team_id', 'away_team_id', name='unique_match_per_category_and_division')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('matches_table')
    op.drop_table('league_players_table')
    op.drop_table('league_teams_table')
    op.drop_table('league_category_rounds_table')
    op.drop_table('league_categories_table')
    op.drop_table('player_team_table')
    op.drop_table('leagues_table')
    op.drop_table('teams_table')
    op.drop_table('players_table')
    op.drop_table('notifications_table')
    op.drop_table('league_administrator_table')
    op.drop_table('users_table')
    op.drop_index('league_trophies_idx', table_name='images_url_table')
    op.drop_table('images_url_table')
    op.drop_table('entity_logs_table')
    # ### end Alembic commands ###
